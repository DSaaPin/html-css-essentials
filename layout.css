/*üëá General Styles */
body,
html {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
  height: 100%;
}

.container {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

/*üëá Flexbox Layout */
.flexbox-layout {
  display: flex;
  flex-direction: column;
  height: 50%;
  background-color: #f0f8ff; /* Light blue background */
}

.flexbox-header,
.flexbox-nav,
.flexbox-main,
.flexbox-sidebar,
.flexbox-footer {
  padding: 20px;
  margin: 10px;
  border-radius: 5px;
}

.flexbox-header {
  background-color: #ffb6c1; /* Light pink */
}

.flexbox-nav {
  background-color: #add8e6; /* Light blue */
}

.flexbox-content {
  display: flex;
  flex: 1;
}

.flexbox-main {
  background-color: #90ee90; /* Light green */
  flex: 2;
}

.flexbox-sidebar {
  background-color: #ffa07a; /* Light salmon */
  flex: 1;
}

.flexbox-footer {
  background-color: #d3d3d3; /* Light gray */
}

/*üëá Grid Layout */
.grid-layout {
  display: grid;
  height: 50%;
  grid-template-areas:
    "header header"
    "nav nav"
    "main sidebar"
    "footer footer";
  grid-template-rows: auto auto 1fr auto;
  grid-template-columns: 2fr 1fr;
  background-color: #fff0f5; /* Lavender blush background */
}

/* üëÜ How it works? 

üìù Notes: 

Grid Container (.grid-layout): display: grid;: Sets up the grid layout.
height: 50%;: Sets the height of the grid container to 50% of its parent element's height.
grid-template-areas:: Defines the named areas and their arrangement:

"header header": The header spans both columns in the first row.
"nav nav": The nav spans both columns in the second row.
"main sidebar": The main content takes up the first column, and the sidebar takes up the second column in the third row.
"footer footer": The footer spans both columns in the fourth row.

‚ö†Ô∏è fr: The fr unit in CSS Grid Layout stands for "fraction of the available space" (For Grid System)
It is a flexible unit that allows you to allocate portions of the available space within a grid container.
The fr unit is especially useful for creating responsive grid layouts where you want to distribute space
proportionally among grid items.

grid-template-rows: auto auto 1fr auto;: Defines the heights of the rows:
The first two rows (auto and auto) will adjust their heights based on their content.
The third row (1fr) will take up the remaining available space.
The fourth row (auto) will adjust its height based on its content.
grid-template-columns: 2fr 1fr;: Defines the widths of the columns:
The first column (2fr) will take up twice as much space as the second column (1fr). 

AUTO vs FR

‚≠êÔ∏è auto

Behavior: The size of the row or column is determined by the size of its content.
If the content is small, the row or column will be small; if the content is large, the row or column will expand to fit it.

Usage: Best used when you want the grid tracks to fit tightly around their content.


‚≠êÔ∏è 1fr

Behavior: The size of the row or column is a fraction of the remaining available space
in the grid container. The fr unit stands for "fraction".

Usage: Best used when you want to distribute available space proportionally among grid tracks.

*/

.grid-header,
.grid-nav,
.grid-main,
.grid-sidebar,
.grid-footer {
  padding: 20px;
  margin: 10px;
  border-radius: 5px;
}

.grid-header {
  background-color: #ffb6c1; /* Light pink */
  grid-area: header;
}

.grid-nav {
  background-color: #add8e6; /* Light blue */
  grid-area: nav;
}

.grid-main {
  background-color: #90ee90; /* Light green */
  grid-area: main;
}

.grid-sidebar {
  background-color: #ffa07a; /* Light salmon */
  grid-area: sidebar;
}

.grid-footer {
  background-color: #d3d3d3; /* Light gray */
  grid-area: footer;
}
